<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.4 on 2017-02-09 -->

<plugin>
  <name>JavaFX Maven Plugin</name>
  <description>The JavaFX Maven Plugin provides a way to to assemble distributable bundles for JavaFX applications from within Maven. It provides a wrapper around the JavaFX packaging tools which are provided as part of the JavaFX installation.</description>
  <groupId>com.zenjava</groupId>
  <artifactId>javafx-maven-plugin</artifactId>
  <version>8.8.3</version>
  <goalPrefix>jfx</goalPrefix>
  <mojos>
    <mojo>
      <goal>build-jar</goal>
      <requiresDependencyResolution>runtime</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>package</phase>
      <implementation>com.zenjava.javafx.maven.plugin.JarMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>additionalAppResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>When you need to add additional files to generated app-folder (e.g. README, license, third-party-tools, ...), you can specify the source-folder here. All files will be copied recursively.</description>
        </parameter>
        <parameter>
          <name>addPackagerJar</name>
          <type>boolean</type>
          <since>8.1.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>For being able to use &lt;userJvmArgs&gt;, we have to copy some dependency when being used. To disable this feature an not having packager.jar in your project, set this to false.
To get more information about, please check the documentation here: https://docs.oracle.com/javase/8/docs/technotes/guides/deploy/jvm_options_api.html.
</description>
        </parameter>
        <parameter>
          <name>allPermissions</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to true if your app needs to break out of the standard web sandbox and do more powerful functions.
If you are using FXML you will need to set this value to true.
</description>
        </parameter>
        <parameter>
          <name>classpathExcludes</name>
          <type>java.util.List</type>
          <since>8.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>In the case you don&apos;t want some dependency landing in the generated lib-folder (e.g. complex maven-dependencies), you now can manually exclude that dependency by added it&apos;s coordinates here.</description>
        </parameter>
        <parameter>
          <name>classpathExcludesTransient</name>
          <type>boolean</type>
          <since>8.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Per default all listed classpath excludes are ment to be transivie, that means when any direct declared dependency requires another dependency.
When having &lt;classpathExcludes&gt; contains any dependency, that dependency including all transitive dependencies are filtered while processing lib-files, it&apos;s the default behaviour. In the rare case you have some very special setup, and just want to exlude these dependency, but want to preserve all transitive dependencies going into the lib-folder, this can be set via this property.

Set this to false when you want to have the direct declared dependency excluded from lib-file-processing.
</description>
        </parameter>
        <parameter>
          <name>copyAdditionalAppResourcesToJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>It is possible to copy all files specified by additionalAppResources into the created app-folder containing your jfx-jar. This makes it possible to have external files (like native binaries) being available while developing using the run-mojo.</description>
        </parameter>
        <parameter>
          <name>css2bin</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to switch on and off the compiling of CSS files to the binary format. In theory this has some minor performance gains, but it&apos;s debatable whether you will notice them, and some people have experienced problems with the resulting compiled files. Use at your own risk. By default this is false and CSS files are left in their plain text format as they are found.</description>
        </parameter>
        <parameter>
          <name>deployDir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory contain deployment specific files, such as icons and splash screen images. This directory is added to the classpath of the Mojo when it runs, so that any files within this directory are accessible to the JavaFX packaging tools.
This defaults to src/main/deploy and typically this is good enough. Just put your deployment specific files in this directory and they will be automatically picked up.

The most common usage for this is to provide platform specific icons for native bundles. In this case you need to follow the convention of the JavaFX packaging tools to ensure your icons get picked up.

-	for windows put an icon at src/main/deploy/package/windows/your-app-name.ico
-	for mac put an icon at src/main/deploy/package/macosx/your-app-name.icns
</description>
        </parameter>
        <parameter>
          <name>fixedManifestClasspath</name>
          <type>java.lang.String</type>
          <since>8.8.0</since>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>jfxAppOutputDir</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &apos;app&apos; output directory. This is where the base executable JavaFX jar is built into, along with any dependent libraries (place in the &apos;lib&apos; sub-directory). The resulting JAR in this directory will be ready for distribution, including Pre-Loaders, signing, etc. This JAR will also be the one bundled into the other distribution bundles (i.e. web or native) if you run the relevant commands for that.
This defaults to &apos;target/jfx/app&apos; and in most cases there is no real need to change this.
</description>
        </parameter>
        <parameter>
          <name>jfxCallFromCLI</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Will be set when having goal &apos;build-jar&apos; within package-phase and calling &apos;jfx:jar&apos; or &apos;jfx:native&apos; from CLI. Internal usage only.</description>
        </parameter>
        <parameter>
          <name>jfxMainAppJarName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the JavaFX packaged JAR to be built into the &apos;app&apos; directory. By default this will be the finalName as set in your project with a &apos;-jfx&apos; suffix. Change this if you want something nicer. Note, that changing this value does not affect the regular old, non-JFX modified JAR (built in the &apos;target&apos; directory).</description>
        </parameter>
        <parameter>
          <name>libFolderName</name>
          <type>java.lang.String</type>
          <since>8.8.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>All dependencies are copied to a separated folder, which can be changed.</description>
        </parameter>
        <parameter>
          <name>mainClass</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The main JavaFX application class that acts as the entry point to the JavaFX application.</description>
        </parameter>
        <parameter>
          <name>manifestAttributes</name>
          <type>java.util.Map</type>
          <required>false</required>
          <editable>true</editable>
          <description>To add custom manifest-entries, just add each entry/value-pair here.</description>
        </parameter>
        <parameter>
          <name>preLoader</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A custom class that can act as a Pre-Loader for your app. The Pre-Loader is run before anything else and is useful for showing splash screens or similar &apos;progress&apos; style windows. For more information on Pre-Loaders, see the official JavaFX packaging documentation.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to true for skipping the execution.</description>
        </parameter>
        <parameter>
          <name>skipCopyingDependencies</name>
          <type>boolean</type>
          <since>8.8.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To skip copying all dependencies, set this to true. Please note that all dependencies will be added to the manifest-classpath as normal, only the copy-process gets skipped.</description>
        </parameter>
        <parameter>
          <name>updateExistingJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to switch on updating the existing jar created with maven. The jar to be updated is taken from &apos;${project.basedir}/target/${project.build.finalName}.jar&apos;.
This makes all entries inside MANIFEST.MF being transfered to the jfx-jar.
</description>
        </parameter>
        <parameter>
          <name>useEnvironmentRelativeExecutables</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>All commands executed by this Maven-plugin will be done using the current available commands of your maven-execution environment. It is possible to call Maven with a different version of Java, so these calls might be wrong. To use the executables of the JDK used for running this maven-plugin, please set this to false. You might need this in the case you installed multiple versions of Java. The default is to use environment relative executables.</description>
        </parameter>
        <parameter>
          <name>useLibFolderContentForManifestClasspath</name>
          <type>boolean</type>
          <since>8.8.0</since>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to turn on verbose logging. Set this to true if you are having problems and want more detailed information.</description>
        </parameter>
      </parameters>
      <configuration>
        <additionalAppResources implementation="java.io.File">${jfx.additionalAppResources}</additionalAppResources>
        <addPackagerJar implementation="boolean" default-value="true">${jfx.addPackagerJar}</addPackagerJar>
        <allPermissions implementation="boolean" default-value="false">${jfx.allPermissions}</allPermissions>
        <classpathExcludes implementation="java.util.List">${jfx.classpathExcludes}</classpathExcludes>
        <classpathExcludesTransient implementation="boolean" default-value="true">${jfx.classpathExcludesTransient}</classpathExcludesTransient>
        <copyAdditionalAppResourcesToJar implementation="boolean" default-value="false">${jfx.copyAdditionalAppResourcesToJar}</copyAdditionalAppResourcesToJar>
        <css2bin implementation="boolean" default-value="false">${jfx.css2bin}</css2bin>
        <deployDir implementation="java.lang.String" default-value="${project.basedir}/src/main/deploy">${jfx.deployDir}</deployDir>
        <fixedManifestClasspath implementation="java.lang.String" default-value="">${jfx.fixedManifestClasspath}</fixedManifestClasspath>
        <jfxAppOutputDir implementation="java.io.File" default-value="${project.build.directory}/jfx/app">${jfx.jfxAppOutputDir}</jfxAppOutputDir>
        <jfxCallFromCLI implementation="boolean" default-value="false"/>
        <jfxMainAppJarName implementation="java.lang.String" default-value="${project.build.finalName}-jfx.jar">${jfx.jfxMainAppJarName}</jfxMainAppJarName>
        <libFolderName implementation="java.lang.String" default-value="lib">${jfx.libFolderName}</libFolderName>
        <mainClass implementation="java.lang.String">${jfx.mainClass}</mainClass>
        <manifestAttributes implementation="java.util.Map">${jfx.manifestAttributes}</manifestAttributes>
        <preLoader implementation="java.lang.String">${jfx.preLoader}</preLoader>
        <skip implementation="boolean" default-value="false">${jfx.skip}</skip>
        <skipCopyingDependencies implementation="boolean">${jfx.skipCopyingDependencies}</skipCopyingDependencies>
        <updateExistingJar implementation="boolean" default-value="false">${jfx.updateExistingJar}</updateExistingJar>
        <useEnvironmentRelativeExecutables implementation="boolean" default-value="true">${jfx.useEnvironmentRelativeExecutables}</useEnvironmentRelativeExecutables>
        <useLibFolderContentForManifestClasspath implementation="boolean" default-value="false">${jfx.useLibFolderContentForManifestClasspath}</useLibFolderContentForManifestClasspath>
        <verbose implementation="java.lang.Boolean" default-value="false">${jfx.verbose}</verbose>
      </configuration>
    </mojo>
    <mojo>
      <goal>build-keystore</goal>
      <description>Generates a development keysstore that can be used for signing web based distribution bundles based on POM settings. You only need to run this command once and then you can include the resulting keystore in your source control. There is no harm in re-running the command however, it will simply overwrite the keystore with a new one.
The resulting keystore is useful for simplifying development but should not be used in a production environment. You should get a legitimate certificate from a certifier and include that keystore in your codebase. Using this testing keystore will result in your users seeing the ugly warning about untrusted code.

Please do not use for production.
</description>
      <requiresDependencyResolution>runtime</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>validate</phase>
      <implementation>com.zenjava.javafx.maven.plugin.GenerateKeyStoreMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>additionalKeytoolParameters</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>certCountry</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &apos;country&apos; code that your organisation is based in. This should be a proper country code, e.g. Australia is &apos;AU&apos;</description>
        </parameter>
        <parameter>
          <name>certDomain</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &apos;domain&apos; to use for the certificate. Typically this is your company&apos;s domain name.</description>
        </parameter>
        <parameter>
          <name>certOrg</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &apos;organisation&apos; name to use for the certificate.</description>
        </parameter>
        <parameter>
          <name>certOrgUnit</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &apos;organisational unit&apos; to use for the certificate. Your department or team name typically.</description>
        </parameter>
        <parameter>
          <name>certState</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &apos;state&apos; (province, etc) that your organisation is based in.</description>
        </parameter>
        <parameter>
          <name>keyPassword</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The password to use when accessing the key within the keystore. If not set, this will default to keyStorePassword.</description>
        </parameter>
        <parameter>
          <name>keyStore</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The location of the keystore. If not set, this will default to src/main/deploy/kesytore.jks which is usually fine to use for most cases.</description>
        </parameter>
        <parameter>
          <name>keyStoreAlias</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The alias to use when accessing the keystore. This will default to &apos;myalias&apos;.</description>
        </parameter>
        <parameter>
          <name>keyStorePassword</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The password to use when accessing the keystore. This will default to &apos;password&apos;.</description>
        </parameter>
        <parameter>
          <name>overwriteKeyStore</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to true to silently overwrite the keystore. If this is set to false (the default) then if a keystore already exists, this Mojo will fail with an error. This is just to stop you inadvertantly overwritting a keystore you really didn&apos;t want to lose.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to true for skipping the execution.</description>
        </parameter>
        <parameter>
          <name>useEnvironmentRelativeExecutables</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>All commands executed by this Maven-plugin will be done using the current available commands of your maven-execution environment. It is possible to call Maven with a different version of Java, so these calls might be wrong. To use the executables of the JDK used for running this maven-plugin, please set this to false. You might need this in the case you installed multiple versions of Java. The default is to use environment relative executables.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to turn on verbose logging. Set this to true if you are having problems and want more detailed information.</description>
        </parameter>
      </parameters>
      <configuration>
        <additionalKeytoolParameters implementation="java.util.List">${jfx.additionalKeytoolParameters}</additionalKeytoolParameters>
        <certCountry implementation="java.lang.String">${jfx.certCountry}</certCountry>
        <certDomain implementation="java.lang.String">${jfx.certDomain}</certDomain>
        <certOrg implementation="java.lang.String">${jfx.certOrg}</certOrg>
        <certOrgUnit implementation="java.lang.String">${jfx.certOrgUnit}</certOrgUnit>
        <certState implementation="java.lang.String">${jfx.certState}</certState>
        <keyPassword implementation="java.lang.String">${jfx.keyPassword}</keyPassword>
        <keyStore implementation="java.io.File" default-value="src/main/deploy/keystore.jks">${jfx.keyStore}</keyStore>
        <keyStoreAlias implementation="java.lang.String" default-value="myalias">${jfx.keyStoreAlias}</keyStoreAlias>
        <keyStorePassword implementation="java.lang.String" default-value="password">${jfx.keyStorePassword}</keyStorePassword>
        <overwriteKeyStore implementation="boolean" default-value="false">${jfx.overwriteKeyStore}</overwriteKeyStore>
        <skip implementation="boolean" default-value="false">${jfx.skip}</skip>
        <useEnvironmentRelativeExecutables implementation="boolean" default-value="true">${jfx.useEnvironmentRelativeExecutables}</useEnvironmentRelativeExecutables>
        <verbose implementation="java.lang.Boolean" default-value="false">${jfx.verbose}</verbose>
      </configuration>
    </mojo>
    <mojo>
      <goal>build-native</goal>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.zenjava.javafx.maven.plugin.NativeMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>additionalAppResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>When you need to add additional files to generated app-folder (e.g. README, license, third-party-tools, ...), you can specify the source-folder here. All files will be copied recursively.</description>
        </parameter>
        <parameter>
          <name>additionalBundlerResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>When you need to add additional files to the base-folder of all bundlers (additional non-overriding files like images, licenses or separated modules for encryption etc.) you can specify the source-folder here. All files will be copied recursively. Please make sure to inform yourself about the details of the used bundler.</description>
        </parameter>
        <parameter>
          <name>additionalJarsignerParameters</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>Since it it possible to sign created jar-files using jarsigner, it might be required to add some special parameters for calling it (like -tsa and -tsacert). Just add them to this list to have them being applied.</description>
        </parameter>
        <parameter>
          <name>appName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the JavaFX packaged executable to be built into the &apos;native/bundles&apos; directory. By default this will be the finalName as set in your project. Change this if you want something nicer. This also has effect on the filename of icon-files, e.g. having &apos;NiceApp&apos; as appName means you have to place that icon at &apos;src/main/deploy/package/[os]/NiceApp.[icon-extension]&apos; for having it picked up by the bundler.</description>
        </parameter>
        <parameter>
          <name>bundleArguments</name>
          <type>java.util.Map</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of bundler arguments. The particular keys and the meaning of their values are dependent on the bundler that is reading the arguments. Any argument not recognized by a bundler is silently ignored, so that arguments that are specific to a specific bundler (for example, a Mac OS X Code signing key name) can be configured and ignored by bundlers that don&apos;t use the particular argument.
To disable creating native bundles with JRE in it, just add &apos;&lt;runtime /&gt;&apos; to bundleArguments.

If there are bundle arguments that override other fields in the configuration, then it is an execution error.
</description>
        </parameter>
        <parameter>
          <name>bundler</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the used bundler found by selected bundleType. May not be installed your OS and will fail in that case.
By default this will be set to &apos;ALL&apos;, depending on your installed OS following values are possible for installers:

-	windows.app (Creates only Windows Executable, does not bundle into Installer)
-	linux.app (Creates only Linux Executable, does not bundle into Installer)
-	mac.app (Creates only Mac Executable, does not bundle into Installer)
-	mac.appStore (Creates a binary bundle ready for deployment into the Mac App Store)
-	exe (Microsoft Windows EXE Installer, via InnoIDE)
-	msi (Microsoft Windows MSI Installer, via WiX)
-	deb (Linux Debian Bundle)
-	rpm (Redhat Package Manager (RPM) bundler)
-	dmg (Mac DMG Installer Bundle)
-	pkg (Mac PKG Installer Bundle)

For a full list of available bundlers on your system, call &apos;mvn jfx:list-bundlers&apos; inside your project.
</description>
        </parameter>
        <parameter>
          <name>customBundlers</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>As it is possible to extend existing bundlers, you don&apos;t have to use your private version of the javafx-maven-plugin. Just provide a list with the java-classes you want to use, declare them as compile-depencendies and run `mvn jfx:native` or by using maven lifecycle. You have to implement the Bundler-interface (@see com.oracle.tools.packager.Bundler).</description>
        </parameter>
        <parameter>
          <name>deployDir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory contain deployment specific files, such as icons and splash screen images. This directory is added to the classpath of the Mojo when it runs, so that any files within this directory are accessible to the JavaFX packaging tools.
This defaults to src/main/deploy and typically this is good enough. Just put your deployment specific files in this directory and they will be automatically picked up.

The most common usage for this is to provide platform specific icons for native bundles. In this case you need to follow the convention of the JavaFX packaging tools to ensure your icons get picked up.

-	for windows put an icon at src/main/deploy/package/windows/your-app-name.ico
-	for mac put an icon at src/main/deploy/package/macosx/your-app-name.icns
</description>
        </parameter>
        <parameter>
          <name>failOnError</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Per default his plugin does not break the build if any bundler is failing. If you want to fail the build and not just print a warning, please set this to true.</description>
        </parameter>
        <parameter>
          <name>fileAssociations</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>It is possible to create file associations when using native installers. When specified, all file associations are bound to the main native launcher. There is no support for bunding them to second launchers.
For more informatione, please see official information source: https://docs.oracle.com/javase/8/docs/technotes/guides/deploy/javafx_ant_task_reference.html#CIAIDHBJ
</description>
        </parameter>
        <parameter>
          <name>identifier</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Used as the &apos;id&apos; of the application, and is used as the CFBundleDisplayName on Mac. See the official JavaFX Packaging tools documentation for other information on this. Will be used as GUID on some installers too.</description>
        </parameter>
        <parameter>
          <name>jfxAppOutputDir</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &apos;app&apos; output directory. This is where the base executable JavaFX jar is built into, along with any dependent libraries (place in the &apos;lib&apos; sub-directory). The resulting JAR in this directory will be ready for distribution, including Pre-Loaders, signing, etc. This JAR will also be the one bundled into the other distribution bundles (i.e. web or native) if you run the relevant commands for that.
This defaults to &apos;target/jfx/app&apos; and in most cases there is no real need to change this.
</description>
        </parameter>
        <parameter>
          <name>jfxCallFromCLI</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Will be set when having goal &apos;build-native&apos; within package-phase and calling &apos;jfx:native&apos; from CLI. Internal usage only.</description>
        </parameter>
        <parameter>
          <name>jfxMainAppJarName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the JavaFX packaged JAR to be built into the &apos;app&apos; directory. By default this will be the finalName as set in your project with a &apos;-jfx&apos; suffix. Change this if you want something nicer. Note, that changing this value does not affect the regular old, non-JFX modified JAR (built in the &apos;target&apos; directory).</description>
        </parameter>
        <parameter>
          <name>jvmArgs</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>JVM Flags to be passed into the JVM at invocation time. These are the arguments to the left of the main class name when launching Java on the command line. For example:
    &lt;jvmArgs&gt;
        &lt;jvmArg&gt;-Xmx8G&lt;/jvmArg&gt;
    &lt;/jvmArgs&gt;
</description>
        </parameter>
        <parameter>
          <name>jvmProperties</name>
          <type>java.util.Map</type>
          <required>false</required>
          <editable>true</editable>
          <description>Properties passed to the Java Virtual Machine when the application is started (i.e. these properties are system properties of the JVM bundled in the native distribution and used to run the application once installed).</description>
        </parameter>
        <parameter>
          <name>keyPassword</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The password to use when accessing the key within the keystore. If not set, this will default to keyStorePassword.</description>
        </parameter>
        <parameter>
          <name>keyStore</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The location of the keystore. If not set, this will default to src/main/deploy/kesytore.jks which is usually fine to use for most cases.</description>
        </parameter>
        <parameter>
          <name>keyStoreAlias</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The alias to use when accessing the keystore. This will default to &apos;myalias&apos;.</description>
        </parameter>
        <parameter>
          <name>keyStorePassword</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The password to use when accessing the keystore. This will default to &apos;password&apos;.</description>
        </parameter>
        <parameter>
          <name>keyStoreType</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The type of KeyStore being used. This defaults to &apos;jks&apos;, which is the normal one.</description>
        </parameter>
        <parameter>
          <name>launcherArguments</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>You can specify arguments that gonna be passed when calling your application.</description>
        </parameter>
        <parameter>
          <name>libFolderName</name>
          <type>java.lang.String</type>
          <since>8.8.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>All dependencies are copied to a separated folder, which can be changed.</description>
        </parameter>
        <parameter>
          <name>mainClass</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The main JavaFX application class that acts as the entry point to the JavaFX application.</description>
        </parameter>
        <parameter>
          <name>nativeOutputDir</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The output directory that the native bundles are to be built into. This will be the base directory only as the JavaFX packaging tools use sub-directories that can&apos;t be customised. Generally just have a rummage through the sub-directories until you find what you are looking for.
This defaults to &apos;target/jfx/native&apos; and the interesting files are usually under &apos;bundles&apos;.
</description>
        </parameter>
        <parameter>
          <name>nativeReleaseVersion</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The release version as passed to the native installer. It would be nice to just use the project&apos;s version number but this must be a fairly traditional version string (like &apos;1.34.5&apos;) with only numeric characters and dot separators, otherwise the JFX packaging tools bomb out. We default to 1.0 in case you can&apos;t be bothered to set a version and don&apos;t really care. Normally all non-number signs and dots are removed from the value, which can be disabled by setting &apos;skipNativeVersionNumberSanitizing&apos; to true.</description>
        </parameter>
        <parameter>
          <name>needMenu</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to true if you would like your application to have a link in the main system menu (or platform equivalent) when it is installed.</description>
        </parameter>
        <parameter>
          <name>needShortcut</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to true if you would like your application to have a shortcut on the users desktop (or platform equivalent) when it is installed.</description>
        </parameter>
        <parameter>
          <name>noBlobSigning</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>JavaFX introduced a new way for signing jar-files, which was called &apos;BLOB signing&apos;.
The tool &apos;jarsigner&apos; is not able to verify that signature and webstart doesn&apos;t accept that format either. For not having to call jarsigner yourself, set this to &apos;true&apos; for having your jar-files getting signed when generating JNLP-files.
</description>
        </parameter>
        <parameter>
          <name>onlyCustomBundlers</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>secondaryLaunchers</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to true for skipping the execution.</description>
        </parameter>
        <parameter>
          <name>skipJNLP</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>skipJNLPRessourcePathWorkaround182</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Since Java version 1.8.0 Update 60 a new bundler for generating JNLP-files was presented and includes a bug while generating relative file-references when building on windows.
Change this to &apos;true&apos; when you don&apos;t want this workaround.
</description>
        </parameter>
        <parameter>
          <name>skipMacBundlerWorkaround</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>skipMainClassScanning</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to true, to not scan for the specified main class inside the generated/copied jar-files.
Check only works for the main launcher, any secondary launchers are not checked.
</description>
        </parameter>
        <parameter>
          <name>skipNativeLauncherWorkaround124</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Since Java version 1.8.0 Update 40 the native launcher for linux was changed and includes a bug while searching for the generated configfile. This results in wrong ouput like this:
client-1.1 No main class specified
client-1.1 Failed to launch JVM

Scenario (which would work on windows):

-	generated launcher: i-am.working.1.2.0-SNAPSHOT
-	launcher-algorithm extracts the &apos;extension&apos; (a concept not known in linux-space for executables) and now searches for i-am.working.1.2.cfg

Change this to &apos;true&apos; when you don&apos;t want this workaround.
</description>
        </parameter>
        <parameter>
          <name>skipNativeLauncherWorkaround167</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Since Java version 1.8.0 Update 60 the native launcher configuration for windows was changed and includes a bug: the file-format before was &apos;property-file&apos;, now it&apos;s &apos;INI-file&apos; per default, but the runtime-configuration isn&apos;t honored like in property-files. This workaround enforces the property-file-format.
Change this to &apos;true&apos; when you don&apos;t want this workaround.
</description>
        </parameter>
        <parameter>
          <name>skipNativeLauncherWorkaround205</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Same problem as workaround for bug 124 for native launchers, but this time regarding created native installers, where the workaround didn&apos;t apply.
Change this to &apos;true&apos; when you don&apos;t want this workaround.

Requires skipNativeLauncherWorkaround124 to be false.
</description>
        </parameter>
        <parameter>
          <name>skipNativeVersionNumberSanitizing</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>skipSigningJarFilesJNLP185</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Since Java version 1.8.0 Update 60 a new bundler for generating JNLP-files was introduced, but lacks the ability to sign jar-files by passing some flag. We are signing the files in the case of having &apos;jnlp&apos; as bundler. The MOJO with the goal &apos;build-web&apos; was deprecated in favor of that new bundler (mostly because the old one does not fit the bundler-list strategy).
Change this to &apos;true&apos; when you don&apos;t want signing jar-files.
</description>
        </parameter>
        <parameter>
          <name>skipSizeRecalculationForJNLP185</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>After signing is done, the sizes inside generated JNLP-files still point to unsigned jar-file sizes, so we have to fix these sizes to be correct. This sizes-fix even lacks in the old web-MOJO.
Change this to &apos;true&apos; when you don&apos;t want to recalculate sizes of jar-files.
</description>
        </parameter>
        <parameter>
          <name>useEnvironmentRelativeExecutables</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>All commands executed by this Maven-plugin will be done using the current available commands of your maven-execution environment. It is possible to call Maven with a different version of Java, so these calls might be wrong. To use the executables of the JDK used for running this maven-plugin, please set this to false. You might need this in the case you installed multiple versions of Java. The default is to use environment relative executables.</description>
        </parameter>
        <parameter>
          <name>userJvmArgs</name>
          <type>java.util.Map</type>
          <required>false</required>
          <editable>true</editable>
          <description>Optional command line arguments passed to the application when it is started. These will be included in the native bundle that is generated and will be accessible via the main(String[] args) method on the main class that is launched at runtime.
These options are user overridable for the value part of the entry via user preferences. The key and the value are concated without a joining character when invoking the JVM.
</description>
        </parameter>
        <parameter>
          <name>vendor</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The vendor of the application (i.e. you). This is required for some of the installation bundles and it&apos;s recommended just to set it from the get-go to avoid problems. This will default to the project.organization.name element in you POM if you have one.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to turn on verbose logging. Set this to true if you are having problems and want more detailed information.</description>
        </parameter>
      </parameters>
      <configuration>
        <additionalAppResources implementation="java.io.File">${jfx.additionalAppResources}</additionalAppResources>
        <additionalBundlerResources implementation="java.io.File">${jfx.additionalBundlerResources}</additionalBundlerResources>
        <additionalJarsignerParameters implementation="java.util.List">${jfx.additionalJarsignerParameters}</additionalJarsignerParameters>
        <appName implementation="java.lang.String" default-value="${project.build.finalName}">${jfx.appName}</appName>
        <bundleArguments implementation="java.util.Map">${jfx.bundleArguments}</bundleArguments>
        <bundler implementation="java.lang.String" default-value="ALL">${jfx.bundler}</bundler>
        <customBundlers implementation="java.util.List">${jfx.customBundlers}</customBundlers>
        <deployDir implementation="java.lang.String" default-value="${project.basedir}/src/main/deploy">${jfx.deployDir}</deployDir>
        <failOnError implementation="boolean" default-value="false">${jfx.failOnError}</failOnError>
        <fileAssociations implementation="java.util.List">${jfx.fileAssociations}</fileAssociations>
        <jfxAppOutputDir implementation="java.io.File" default-value="${project.build.directory}/jfx/app">${jfx.jfxAppOutputDir}</jfxAppOutputDir>
        <jfxCallFromCLI implementation="boolean" default-value="false"/>
        <jfxMainAppJarName implementation="java.lang.String" default-value="${project.build.finalName}-jfx.jar">${jfx.jfxMainAppJarName}</jfxMainAppJarName>
        <jvmArgs implementation="java.util.List">${jfx.jvmArgs}</jvmArgs>
        <jvmProperties implementation="java.util.Map">${jfx.jvmProperties}</jvmProperties>
        <keyPassword implementation="java.lang.String">${jfx.keyPassword}</keyPassword>
        <keyStore implementation="java.io.File" default-value="src/main/deploy/keystore.jks">${jfx.keyStore}</keyStore>
        <keyStoreAlias implementation="java.lang.String" default-value="myalias">${jfx.keyStoreAlias}</keyStoreAlias>
        <keyStorePassword implementation="java.lang.String" default-value="password">${jfx.keyStorePassword}</keyStorePassword>
        <keyStoreType implementation="java.lang.String" default-value="jks">${jfx.keyStoreType}</keyStoreType>
        <launcherArguments implementation="java.util.List">${jfx.launcherArguments}</launcherArguments>
        <libFolderName implementation="java.lang.String" default-value="lib">${jfx.libFolderName}</libFolderName>
        <mainClass implementation="java.lang.String">${jfx.mainClass}</mainClass>
        <nativeOutputDir implementation="java.io.File" default-value="${project.build.directory}/jfx/native">${jfx.nativeOutputDir}</nativeOutputDir>
        <nativeReleaseVersion implementation="java.lang.String" default-value="1.0">${jfx.nativeReleaseVersion}</nativeReleaseVersion>
        <needMenu implementation="boolean" default-value="false">${jfx.needMenu}</needMenu>
        <needShortcut implementation="boolean" default-value="false">${jfx.needShortcut}</needShortcut>
        <noBlobSigning implementation="boolean" default-value="false">${jfx.noBlobSigning}</noBlobSigning>
        <onlyCustomBundlers implementation="boolean" default-value="false">${jfx.onlyCustomBundlers}</onlyCustomBundlers>
        <secondaryLaunchers implementation="java.util.List">${jfx.secondaryLaunchers}</secondaryLaunchers>
        <skip implementation="boolean" default-value="false">${jfx.skip}</skip>
        <skipJNLP implementation="boolean" default-value="false">${jfx.skipJNLP}</skipJNLP>
        <skipJNLPRessourcePathWorkaround182 implementation="boolean">${jfx.skipJNLPRessourcePathWorkaround182}</skipJNLPRessourcePathWorkaround182>
        <skipMacBundlerWorkaround implementation="boolean" default-value="false">${jfx.skipMacBundlerWorkaround}</skipMacBundlerWorkaround>
        <skipMainClassScanning implementation="boolean">${jfx.skipMainClassScanning}</skipMainClassScanning>
        <skipNativeLauncherWorkaround124 implementation="boolean" default-value="false">${jfx.skipNativeLauncherWorkaround124}</skipNativeLauncherWorkaround124>
        <skipNativeLauncherWorkaround167 implementation="boolean" default-value="false">${jfx.skipNativeLauncherWorkaround167}</skipNativeLauncherWorkaround167>
        <skipNativeLauncherWorkaround205 implementation="boolean" default-value="false">${jfx.skipNativeLauncherWorkaround205}</skipNativeLauncherWorkaround205>
        <skipNativeVersionNumberSanitizing implementation="boolean" default-value="false">${jfx.skipNativeVersionNumberSanitizing}</skipNativeVersionNumberSanitizing>
        <skipSigningJarFilesJNLP185 implementation="boolean" default-value="false">${jfx.skipSigningJarFilesJNLP185}</skipSigningJarFilesJNLP185>
        <skipSizeRecalculationForJNLP185 implementation="boolean" default-value="false">${jfx.skipSizeRecalculationForJNLP185}</skipSizeRecalculationForJNLP185>
        <useEnvironmentRelativeExecutables implementation="boolean" default-value="true">${jfx.useEnvironmentRelativeExecutables}</useEnvironmentRelativeExecutables>
        <userJvmArgs implementation="java.util.Map">${jfx.userJvmArgs}</userJvmArgs>
        <vendor implementation="java.lang.String">${project.organization.name}</vendor>
        <verbose implementation="java.lang.Boolean" default-value="false">${jfx.verbose}</verbose>
      </configuration>
    </mojo>
    <mojo>
      <goal>build-web</goal>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.zenjava.javafx.maven.plugin.WebMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <deprecated>is gonna to be replaced in the oraclejdk by normal bundler with id &amp;quot;jnlp&amp;quot;</deprecated>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>allPermissions</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to true if your app needs to break out of the standard web sandbox and do more powerful functions.

By setting this value, you are implicitly saying that your app needs to be signed. As such, this Mojo will automatically attempt to sign your JARs if this is set, and in this case the various keyStore parameters need to be set correctly and a keyStore must be present. Use the generate-key-store Mojo to generate a local keyStore for testing.

If you are using FXML you will need to set this value to true.
</description>
        </parameter>
        <parameter>
          <name>deployDir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory contain deployment specific files, such as icons and splash screen images. This directory is added to the classpath of the Mojo when it runs, so that any files within this directory are accessible to the JavaFX packaging tools.
This defaults to src/main/deploy and typically this is good enough. Just put your deployment specific files in this directory and they will be automatically picked up.

The most common usage for this is to provide platform specific icons for native bundles. In this case you need to follow the convention of the JavaFX packaging tools to ensure your icons get picked up.

-	for windows put an icon at src/main/deploy/package/windows/your-app-name.ico
-	for mac put an icon at src/main/deploy/package/macosx/your-app-name.icns
</description>
        </parameter>
        <parameter>
          <name>description</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A description used within generated JNLP-file.</description>
        </parameter>
        <parameter>
          <name>embeddedHeight</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>If not set, will be the same as height-parameter.</description>
        </parameter>
        <parameter>
          <name>embeddedWidth</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>If not set, will be the same as width-parameter.</description>
        </parameter>
        <parameter>
          <name>height</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>j2seVersion</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>This value refers to a platform version of the Java Platform Standard Edition.</description>
        </parameter>
        <parameter>
          <name>jfxAppOutputDir</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &apos;app&apos; output directory. This is where the base executable JavaFX jar is built into, along with any dependent libraries (place in the &apos;lib&apos; sub-directory). The resulting JAR in this directory will be ready for distribution, including Pre-Loaders, signing, etc. This JAR will also be the one bundled into the other distribution bundles (i.e. web or native) if you run the relevant commands for that.
This defaults to &apos;target/jfx/app&apos; and in most cases there is no real need to change this.
</description>
        </parameter>
        <parameter>
          <name>jfxMainAppJarName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the JavaFX packaged JAR to be built into the &apos;app&apos; directory. By default this will be the finalName as set in your project with a &apos;-jfx&apos; suffix. Change this if you want something nicer. Note, that changing this value does not affect the regular old, non-JFX modified JAR (built in the &apos;target&apos; directory).</description>
        </parameter>
        <parameter>
          <name>keyPassword</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The password to use when accessing the key within the keystore. If not set, this will default to keyStorePassword.</description>
        </parameter>
        <parameter>
          <name>keyStore</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The location of the keystore. If not set, this will default to src/main/deploy/kesytore.jks which is usually fine to use for most cases.</description>
        </parameter>
        <parameter>
          <name>keyStoreAlias</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The alias to use when accessing the keystore. This will default to &apos;myalias&apos;.</description>
        </parameter>
        <parameter>
          <name>keyStorePassword</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The password to use when accessing the keystore. This will default to &apos;password&apos;.</description>
        </parameter>
        <parameter>
          <name>keyStoreType</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The type of KeyStore being used. This defaults to &apos;jks&apos;, which is the normal one.</description>
        </parameter>
        <parameter>
          <name>libFolderName</name>
          <type>java.lang.String</type>
          <since>8.8.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>All dependencies are copied to a separated folder, which can be changed.</description>
        </parameter>
        <parameter>
          <name>mainClass</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The main JavaFX application class that acts as the entry point to the JavaFX application.</description>
        </parameter>
        <parameter>
          <name>needMenu</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to true if you would like your application to have a link in the main system menu (or platform equivalent) when it is installed.</description>
        </parameter>
        <parameter>
          <name>needShortcut</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to true if you would like your application to have a shortcut on the users desktop (or platform equivalent) when it is installed.</description>
        </parameter>
        <parameter>
          <name>preLoader</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A custom class that can act as a Pre-Loader for your app. The Pre-Loader is run before anything else and is useful for showing splash screens or similar &apos;progress&apos; style windows. For more information on Pre-Loaders, see the official JavaFX packaging documentation.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to true for skipping the execution.</description>
        </parameter>
        <parameter>
          <name>title</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A title used within generated JNLP-file.</description>
        </parameter>
        <parameter>
          <name>useEnvironmentRelativeExecutables</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>All commands executed by this Maven-plugin will be done using the current available commands of your maven-execution environment. It is possible to call Maven with a different version of Java, so these calls might be wrong. To use the executables of the JDK used for running this maven-plugin, please set this to false. You might need this in the case you installed multiple versions of Java. The default is to use environment relative executables.</description>
        </parameter>
        <parameter>
          <name>vendor</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The vendor (i.e. you) to include in the deployment information.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to turn on verbose logging. Set this to true if you are having problems and want more detailed information.</description>
        </parameter>
        <parameter>
          <name>webOutputDir</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The output directory that the web bundle is to be built into. Both the webstart and applet bundle are generated into the same output directory and share the same JNLP and JAR files.
</description>
        </parameter>
        <parameter>
          <name>width</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <allPermissions implementation="boolean" default-value="false"/>
        <deployDir implementation="java.lang.String" default-value="${project.basedir}/src/main/deploy">${jfx.deployDir}</deployDir>
        <description implementation="java.lang.String" default-value="Sample JavaFX Application."/>
        <height implementation="int" default-value="600"/>
        <j2seVersion implementation="java.lang.String" default-value="1.7+"/>
        <jfxAppOutputDir implementation="java.io.File" default-value="${project.build.directory}/jfx/app">${jfx.jfxAppOutputDir}</jfxAppOutputDir>
        <jfxMainAppJarName implementation="java.lang.String" default-value="${project.build.finalName}-jfx.jar">${jfx.jfxMainAppJarName}</jfxMainAppJarName>
        <keyStore implementation="java.io.File" default-value="src/main/deploy/keystore.jks"/>
        <keyStoreAlias implementation="java.lang.String" default-value="myalias"/>
        <keyStorePassword implementation="java.lang.String" default-value="password"/>
        <keyStoreType implementation="java.lang.String" default-value="jks"/>
        <libFolderName implementation="java.lang.String" default-value="lib">${jfx.libFolderName}</libFolderName>
        <mainClass implementation="java.lang.String">${jfx.mainClass}</mainClass>
        <needMenu implementation="boolean" default-value="false"/>
        <needShortcut implementation="boolean" default-value="false"/>
        <skip implementation="boolean" default-value="false">${jfx.skip}</skip>
        <title implementation="java.lang.String" default-value="Sample JavaFX Application"/>
        <useEnvironmentRelativeExecutables implementation="boolean" default-value="true">${jfx.useEnvironmentRelativeExecutables}</useEnvironmentRelativeExecutables>
        <vendor implementation="java.lang.String">${project.organization.name}</vendor>
        <verbose implementation="java.lang.Boolean" default-value="false">${jfx.verbose}</verbose>
        <webOutputDir implementation="java.io.File" default-value="${project.build.directory}/jfx/web"/>
        <width implementation="int" default-value="800"/>
      </configuration>
    </mojo>
    <mojo>
      <goal>generate-key-store</goal>
      <requiresDependencyResolution>runtime</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>validate</phase>
      <implementation>com.zenjava.javafx.maven.plugin.CliGenerateKeyStoreMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>additionalKeytoolParameters</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>certCountry</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &apos;country&apos; code that your organisation is based in. This should be a proper country code, e.g. Australia is &apos;AU&apos;</description>
        </parameter>
        <parameter>
          <name>certDomain</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &apos;domain&apos; to use for the certificate. Typically this is your company&apos;s domain name.</description>
        </parameter>
        <parameter>
          <name>certOrg</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &apos;organisation&apos; name to use for the certificate.</description>
        </parameter>
        <parameter>
          <name>certOrgUnit</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &apos;organisational unit&apos; to use for the certificate. Your department or team name typically.</description>
        </parameter>
        <parameter>
          <name>certState</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &apos;state&apos; (province, etc) that your organisation is based in.</description>
        </parameter>
        <parameter>
          <name>keyPassword</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The password to use when accessing the key within the keystore. If not set, this will default to keyStorePassword.</description>
        </parameter>
        <parameter>
          <name>keyStore</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The location of the keystore. If not set, this will default to src/main/deploy/kesytore.jks which is usually fine to use for most cases.</description>
        </parameter>
        <parameter>
          <name>keyStoreAlias</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The alias to use when accessing the keystore. This will default to &apos;myalias&apos;.</description>
        </parameter>
        <parameter>
          <name>keyStorePassword</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The password to use when accessing the keystore. This will default to &apos;password&apos;.</description>
        </parameter>
        <parameter>
          <name>overwriteKeyStore</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to true to silently overwrite the keystore. If this is set to false (the default) then if a keystore already exists, this Mojo will fail with an error. This is just to stop you inadvertantly overwritting a keystore you really didn&apos;t want to lose.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to true for skipping the execution.</description>
        </parameter>
        <parameter>
          <name>useEnvironmentRelativeExecutables</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>All commands executed by this Maven-plugin will be done using the current available commands of your maven-execution environment. It is possible to call Maven with a different version of Java, so these calls might be wrong. To use the executables of the JDK used for running this maven-plugin, please set this to false. You might need this in the case you installed multiple versions of Java. The default is to use environment relative executables.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to turn on verbose logging. Set this to true if you are having problems and want more detailed information.</description>
        </parameter>
      </parameters>
      <configuration>
        <additionalKeytoolParameters implementation="java.util.List">${jfx.additionalKeytoolParameters}</additionalKeytoolParameters>
        <certCountry implementation="java.lang.String">${jfx.certCountry}</certCountry>
        <certDomain implementation="java.lang.String">${jfx.certDomain}</certDomain>
        <certOrg implementation="java.lang.String">${jfx.certOrg}</certOrg>
        <certOrgUnit implementation="java.lang.String">${jfx.certOrgUnit}</certOrgUnit>
        <certState implementation="java.lang.String">${jfx.certState}</certState>
        <keyPassword implementation="java.lang.String">${jfx.keyPassword}</keyPassword>
        <keyStore implementation="java.io.File" default-value="src/main/deploy/keystore.jks">${jfx.keyStore}</keyStore>
        <keyStoreAlias implementation="java.lang.String" default-value="myalias">${jfx.keyStoreAlias}</keyStoreAlias>
        <keyStorePassword implementation="java.lang.String" default-value="password">${jfx.keyStorePassword}</keyStorePassword>
        <overwriteKeyStore implementation="boolean" default-value="false">${jfx.overwriteKeyStore}</overwriteKeyStore>
        <skip implementation="boolean" default-value="false">${jfx.skip}</skip>
        <useEnvironmentRelativeExecutables implementation="boolean" default-value="true">${jfx.useEnvironmentRelativeExecutables}</useEnvironmentRelativeExecutables>
        <verbose implementation="java.lang.Boolean" default-value="false">${jfx.verbose}</verbose>
      </configuration>
    </mojo>
    <mojo>
      <goal>help</goal>
      <description>Display help information on javafx-maven-plugin.
Call mvn jfx:help -Ddetail=true -Dgoal=&lt;goal-name&gt; to display parameter details.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.zenjava.javafx.maven.plugin.HelpMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>detail</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If true, display all settable properties for each goal.</description>
        </parameter>
        <parameter>
          <name>goal</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the goal for which to show help. If unspecified, all goals will be displayed.</description>
        </parameter>
        <parameter>
          <name>indentSize</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The number of spaces per indentation level, should be positive.</description>
        </parameter>
        <parameter>
          <name>lineLength</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The maximum length of a display line, should be positive.</description>
        </parameter>
      </parameters>
      <configuration>
        <detail implementation="boolean" default-value="false">${detail}</detail>
        <goal implementation="java.lang.String">${goal}</goal>
        <indentSize implementation="int" default-value="2">${indentSize}</indentSize>
        <lineLength implementation="int" default-value="80">${lineLength}</lineLength>
      </configuration>
    </mojo>
    <mojo>
      <goal>jar</goal>
      <description>Builds an executable JAR for the project that has all the trappings needed to run as a JavaFX app. This will include Pre-Launchers and all the other weird and wonderful things that the JavaFX packaging tools allow and/or require.
Any runtime dependencies for this project will be included in a separate &apos;lib&apos; sub-directory alongside the resulting JavaFX friendly JAR. The manifest within the JAR will have a reference to these libraries using the relative &apos;lib&apos; path so that you can copy the JAR and the lib directory exactly as is and distribute this bundle.

The JAR and the &apos;lib&apos; directory built by this Mojo are used as the inputs to the other distribution bundles. The native and web Mojos for example, will trigger this Mojo first and then will copy the resulting JAR into their own distribution bundles.
</description>
      <requiresDependencyResolution>runtime</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>package</phase>
      <executePhase>package</executePhase>
      <executeLifecycle>jfxjar</executeLifecycle>
      <implementation>com.zenjava.javafx.maven.plugin.CliJarMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>additionalAppResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>When you need to add additional files to generated app-folder (e.g. README, license, third-party-tools, ...), you can specify the source-folder here. All files will be copied recursively.</description>
        </parameter>
        <parameter>
          <name>addPackagerJar</name>
          <type>boolean</type>
          <since>8.1.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>For being able to use &lt;userJvmArgs&gt;, we have to copy some dependency when being used. To disable this feature an not having packager.jar in your project, set this to false.
To get more information about, please check the documentation here: https://docs.oracle.com/javase/8/docs/technotes/guides/deploy/jvm_options_api.html.
</description>
        </parameter>
        <parameter>
          <name>allPermissions</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to true if your app needs to break out of the standard web sandbox and do more powerful functions.
If you are using FXML you will need to set this value to true.
</description>
        </parameter>
        <parameter>
          <name>classpathExcludes</name>
          <type>java.util.List</type>
          <since>8.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>In the case you don&apos;t want some dependency landing in the generated lib-folder (e.g. complex maven-dependencies), you now can manually exclude that dependency by added it&apos;s coordinates here.</description>
        </parameter>
        <parameter>
          <name>classpathExcludesTransient</name>
          <type>boolean</type>
          <since>8.2.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>Per default all listed classpath excludes are ment to be transivie, that means when any direct declared dependency requires another dependency.
When having &lt;classpathExcludes&gt; contains any dependency, that dependency including all transitive dependencies are filtered while processing lib-files, it&apos;s the default behaviour. In the rare case you have some very special setup, and just want to exlude these dependency, but want to preserve all transitive dependencies going into the lib-folder, this can be set via this property.

Set this to false when you want to have the direct declared dependency excluded from lib-file-processing.
</description>
        </parameter>
        <parameter>
          <name>copyAdditionalAppResourcesToJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>It is possible to copy all files specified by additionalAppResources into the created app-folder containing your jfx-jar. This makes it possible to have external files (like native binaries) being available while developing using the run-mojo.</description>
        </parameter>
        <parameter>
          <name>css2bin</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to switch on and off the compiling of CSS files to the binary format. In theory this has some minor performance gains, but it&apos;s debatable whether you will notice them, and some people have experienced problems with the resulting compiled files. Use at your own risk. By default this is false and CSS files are left in their plain text format as they are found.</description>
        </parameter>
        <parameter>
          <name>deployDir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory contain deployment specific files, such as icons and splash screen images. This directory is added to the classpath of the Mojo when it runs, so that any files within this directory are accessible to the JavaFX packaging tools.
This defaults to src/main/deploy and typically this is good enough. Just put your deployment specific files in this directory and they will be automatically picked up.

The most common usage for this is to provide platform specific icons for native bundles. In this case you need to follow the convention of the JavaFX packaging tools to ensure your icons get picked up.

-	for windows put an icon at src/main/deploy/package/windows/your-app-name.ico
-	for mac put an icon at src/main/deploy/package/macosx/your-app-name.icns
</description>
        </parameter>
        <parameter>
          <name>fixedManifestClasspath</name>
          <type>java.lang.String</type>
          <since>8.8.0</since>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>jfxAppOutputDir</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &apos;app&apos; output directory. This is where the base executable JavaFX jar is built into, along with any dependent libraries (place in the &apos;lib&apos; sub-directory). The resulting JAR in this directory will be ready for distribution, including Pre-Loaders, signing, etc. This JAR will also be the one bundled into the other distribution bundles (i.e. web or native) if you run the relevant commands for that.
This defaults to &apos;target/jfx/app&apos; and in most cases there is no real need to change this.
</description>
        </parameter>
        <parameter>
          <name>jfxCallFromCLI</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Will be set when having goal &apos;build-jar&apos; within package-phase and calling &apos;jfx:jar&apos; or &apos;jfx:native&apos; from CLI. Internal usage only.</description>
        </parameter>
        <parameter>
          <name>jfxMainAppJarName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the JavaFX packaged JAR to be built into the &apos;app&apos; directory. By default this will be the finalName as set in your project with a &apos;-jfx&apos; suffix. Change this if you want something nicer. Note, that changing this value does not affect the regular old, non-JFX modified JAR (built in the &apos;target&apos; directory).</description>
        </parameter>
        <parameter>
          <name>libFolderName</name>
          <type>java.lang.String</type>
          <since>8.8.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>All dependencies are copied to a separated folder, which can be changed.</description>
        </parameter>
        <parameter>
          <name>mainClass</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The main JavaFX application class that acts as the entry point to the JavaFX application.</description>
        </parameter>
        <parameter>
          <name>manifestAttributes</name>
          <type>java.util.Map</type>
          <required>false</required>
          <editable>true</editable>
          <description>To add custom manifest-entries, just add each entry/value-pair here.</description>
        </parameter>
        <parameter>
          <name>preLoader</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A custom class that can act as a Pre-Loader for your app. The Pre-Loader is run before anything else and is useful for showing splash screens or similar &apos;progress&apos; style windows. For more information on Pre-Loaders, see the official JavaFX packaging documentation.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to true for skipping the execution.</description>
        </parameter>
        <parameter>
          <name>skipCopyingDependencies</name>
          <type>boolean</type>
          <since>8.8.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>To skip copying all dependencies, set this to true. Please note that all dependencies will be added to the manifest-classpath as normal, only the copy-process gets skipped.</description>
        </parameter>
        <parameter>
          <name>updateExistingJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to switch on updating the existing jar created with maven. The jar to be updated is taken from &apos;${project.basedir}/target/${project.build.finalName}.jar&apos;.
This makes all entries inside MANIFEST.MF being transfered to the jfx-jar.
</description>
        </parameter>
        <parameter>
          <name>useEnvironmentRelativeExecutables</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>All commands executed by this Maven-plugin will be done using the current available commands of your maven-execution environment. It is possible to call Maven with a different version of Java, so these calls might be wrong. To use the executables of the JDK used for running this maven-plugin, please set this to false. You might need this in the case you installed multiple versions of Java. The default is to use environment relative executables.</description>
        </parameter>
        <parameter>
          <name>useLibFolderContentForManifestClasspath</name>
          <type>boolean</type>
          <since>8.8.0</since>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to turn on verbose logging. Set this to true if you are having problems and want more detailed information.</description>
        </parameter>
      </parameters>
      <configuration>
        <additionalAppResources implementation="java.io.File">${jfx.additionalAppResources}</additionalAppResources>
        <addPackagerJar implementation="boolean" default-value="true">${jfx.addPackagerJar}</addPackagerJar>
        <allPermissions implementation="boolean" default-value="false">${jfx.allPermissions}</allPermissions>
        <classpathExcludes implementation="java.util.List">${jfx.classpathExcludes}</classpathExcludes>
        <classpathExcludesTransient implementation="boolean" default-value="true">${jfx.classpathExcludesTransient}</classpathExcludesTransient>
        <copyAdditionalAppResourcesToJar implementation="boolean" default-value="false">${jfx.copyAdditionalAppResourcesToJar}</copyAdditionalAppResourcesToJar>
        <css2bin implementation="boolean" default-value="false">${jfx.css2bin}</css2bin>
        <deployDir implementation="java.lang.String" default-value="${project.basedir}/src/main/deploy">${jfx.deployDir}</deployDir>
        <fixedManifestClasspath implementation="java.lang.String" default-value="">${jfx.fixedManifestClasspath}</fixedManifestClasspath>
        <jfxAppOutputDir implementation="java.io.File" default-value="${project.build.directory}/jfx/app">${jfx.jfxAppOutputDir}</jfxAppOutputDir>
        <jfxCallFromCLI implementation="boolean" default-value="false"/>
        <jfxMainAppJarName implementation="java.lang.String" default-value="${project.build.finalName}-jfx.jar">${jfx.jfxMainAppJarName}</jfxMainAppJarName>
        <libFolderName implementation="java.lang.String" default-value="lib">${jfx.libFolderName}</libFolderName>
        <mainClass implementation="java.lang.String">${jfx.mainClass}</mainClass>
        <manifestAttributes implementation="java.util.Map">${jfx.manifestAttributes}</manifestAttributes>
        <preLoader implementation="java.lang.String">${jfx.preLoader}</preLoader>
        <skip implementation="boolean" default-value="false">${jfx.skip}</skip>
        <skipCopyingDependencies implementation="boolean">${jfx.skipCopyingDependencies}</skipCopyingDependencies>
        <updateExistingJar implementation="boolean" default-value="false">${jfx.updateExistingJar}</updateExistingJar>
        <useEnvironmentRelativeExecutables implementation="boolean" default-value="true">${jfx.useEnvironmentRelativeExecutables}</useEnvironmentRelativeExecutables>
        <useLibFolderContentForManifestClasspath implementation="boolean" default-value="false">${jfx.useLibFolderContentForManifestClasspath}</useLibFolderContentForManifestClasspath>
        <verbose implementation="java.lang.Boolean" default-value="false">${jfx.verbose}</verbose>
      </configuration>
    </mojo>
    <mojo>
      <goal>list-bundlers</goal>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.zenjava.javafx.maven.plugin.ListBundlersMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters/>
    </mojo>
    <mojo>
      <goal>native</goal>
      <description>Generates native deployment bundles (MSI, EXE, DMG, RPG, etc). This Mojo simply wraps the JavaFX packaging tools so it has all the problems and limitations of those tools. Most importantly, this will only generate a native bundle for the platform you are building on (e.g. if you&apos;re on Windows you will get an MSI and an EXE). Additionally you need to first download and install the 3rd-party tools that the JavaFX packaging tools require (e.g. Wix, Inno, etc).
For detailed information on generating native packages it is best to first read through the official documentation on the JavaFX packaging tools.
</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <executeGoal>jar</executeGoal>
      <implementation>com.zenjava.javafx.maven.plugin.CliNativeMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>additionalAppResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>When you need to add additional files to generated app-folder (e.g. README, license, third-party-tools, ...), you can specify the source-folder here. All files will be copied recursively.</description>
        </parameter>
        <parameter>
          <name>additionalBundlerResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>When you need to add additional files to the base-folder of all bundlers (additional non-overriding files like images, licenses or separated modules for encryption etc.) you can specify the source-folder here. All files will be copied recursively. Please make sure to inform yourself about the details of the used bundler.</description>
        </parameter>
        <parameter>
          <name>additionalJarsignerParameters</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>Since it it possible to sign created jar-files using jarsigner, it might be required to add some special parameters for calling it (like -tsa and -tsacert). Just add them to this list to have them being applied.</description>
        </parameter>
        <parameter>
          <name>appName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the JavaFX packaged executable to be built into the &apos;native/bundles&apos; directory. By default this will be the finalName as set in your project. Change this if you want something nicer. This also has effect on the filename of icon-files, e.g. having &apos;NiceApp&apos; as appName means you have to place that icon at &apos;src/main/deploy/package/[os]/NiceApp.[icon-extension]&apos; for having it picked up by the bundler.</description>
        </parameter>
        <parameter>
          <name>bundleArguments</name>
          <type>java.util.Map</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of bundler arguments. The particular keys and the meaning of their values are dependent on the bundler that is reading the arguments. Any argument not recognized by a bundler is silently ignored, so that arguments that are specific to a specific bundler (for example, a Mac OS X Code signing key name) can be configured and ignored by bundlers that don&apos;t use the particular argument.
To disable creating native bundles with JRE in it, just add &apos;&lt;runtime /&gt;&apos; to bundleArguments.

If there are bundle arguments that override other fields in the configuration, then it is an execution error.
</description>
        </parameter>
        <parameter>
          <name>bundler</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specify the used bundler found by selected bundleType. May not be installed your OS and will fail in that case.
By default this will be set to &apos;ALL&apos;, depending on your installed OS following values are possible for installers:

-	windows.app (Creates only Windows Executable, does not bundle into Installer)
-	linux.app (Creates only Linux Executable, does not bundle into Installer)
-	mac.app (Creates only Mac Executable, does not bundle into Installer)
-	mac.appStore (Creates a binary bundle ready for deployment into the Mac App Store)
-	exe (Microsoft Windows EXE Installer, via InnoIDE)
-	msi (Microsoft Windows MSI Installer, via WiX)
-	deb (Linux Debian Bundle)
-	rpm (Redhat Package Manager (RPM) bundler)
-	dmg (Mac DMG Installer Bundle)
-	pkg (Mac PKG Installer Bundle)

For a full list of available bundlers on your system, call &apos;mvn jfx:list-bundlers&apos; inside your project.
</description>
        </parameter>
        <parameter>
          <name>customBundlers</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>As it is possible to extend existing bundlers, you don&apos;t have to use your private version of the javafx-maven-plugin. Just provide a list with the java-classes you want to use, declare them as compile-depencendies and run `mvn jfx:native` or by using maven lifecycle. You have to implement the Bundler-interface (@see com.oracle.tools.packager.Bundler).</description>
        </parameter>
        <parameter>
          <name>deployDir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory contain deployment specific files, such as icons and splash screen images. This directory is added to the classpath of the Mojo when it runs, so that any files within this directory are accessible to the JavaFX packaging tools.
This defaults to src/main/deploy and typically this is good enough. Just put your deployment specific files in this directory and they will be automatically picked up.

The most common usage for this is to provide platform specific icons for native bundles. In this case you need to follow the convention of the JavaFX packaging tools to ensure your icons get picked up.

-	for windows put an icon at src/main/deploy/package/windows/your-app-name.ico
-	for mac put an icon at src/main/deploy/package/macosx/your-app-name.icns
</description>
        </parameter>
        <parameter>
          <name>failOnError</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Per default his plugin does not break the build if any bundler is failing. If you want to fail the build and not just print a warning, please set this to true.</description>
        </parameter>
        <parameter>
          <name>fileAssociations</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>It is possible to create file associations when using native installers. When specified, all file associations are bound to the main native launcher. There is no support for bunding them to second launchers.
For more informatione, please see official information source: https://docs.oracle.com/javase/8/docs/technotes/guides/deploy/javafx_ant_task_reference.html#CIAIDHBJ
</description>
        </parameter>
        <parameter>
          <name>identifier</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Used as the &apos;id&apos; of the application, and is used as the CFBundleDisplayName on Mac. See the official JavaFX Packaging tools documentation for other information on this. Will be used as GUID on some installers too.</description>
        </parameter>
        <parameter>
          <name>jfxAppOutputDir</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &apos;app&apos; output directory. This is where the base executable JavaFX jar is built into, along with any dependent libraries (place in the &apos;lib&apos; sub-directory). The resulting JAR in this directory will be ready for distribution, including Pre-Loaders, signing, etc. This JAR will also be the one bundled into the other distribution bundles (i.e. web or native) if you run the relevant commands for that.
This defaults to &apos;target/jfx/app&apos; and in most cases there is no real need to change this.
</description>
        </parameter>
        <parameter>
          <name>jfxCallFromCLI</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Will be set when having goal &apos;build-native&apos; within package-phase and calling &apos;jfx:native&apos; from CLI. Internal usage only.</description>
        </parameter>
        <parameter>
          <name>jfxMainAppJarName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the JavaFX packaged JAR to be built into the &apos;app&apos; directory. By default this will be the finalName as set in your project with a &apos;-jfx&apos; suffix. Change this if you want something nicer. Note, that changing this value does not affect the regular old, non-JFX modified JAR (built in the &apos;target&apos; directory).</description>
        </parameter>
        <parameter>
          <name>jvmArgs</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>JVM Flags to be passed into the JVM at invocation time. These are the arguments to the left of the main class name when launching Java on the command line. For example:
    &lt;jvmArgs&gt;
        &lt;jvmArg&gt;-Xmx8G&lt;/jvmArg&gt;
    &lt;/jvmArgs&gt;
</description>
        </parameter>
        <parameter>
          <name>jvmProperties</name>
          <type>java.util.Map</type>
          <required>false</required>
          <editable>true</editable>
          <description>Properties passed to the Java Virtual Machine when the application is started (i.e. these properties are system properties of the JVM bundled in the native distribution and used to run the application once installed).</description>
        </parameter>
        <parameter>
          <name>keyPassword</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The password to use when accessing the key within the keystore. If not set, this will default to keyStorePassword.</description>
        </parameter>
        <parameter>
          <name>keyStore</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The location of the keystore. If not set, this will default to src/main/deploy/kesytore.jks which is usually fine to use for most cases.</description>
        </parameter>
        <parameter>
          <name>keyStoreAlias</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The alias to use when accessing the keystore. This will default to &apos;myalias&apos;.</description>
        </parameter>
        <parameter>
          <name>keyStorePassword</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The password to use when accessing the keystore. This will default to &apos;password&apos;.</description>
        </parameter>
        <parameter>
          <name>keyStoreType</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The type of KeyStore being used. This defaults to &apos;jks&apos;, which is the normal one.</description>
        </parameter>
        <parameter>
          <name>launcherArguments</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>You can specify arguments that gonna be passed when calling your application.</description>
        </parameter>
        <parameter>
          <name>libFolderName</name>
          <type>java.lang.String</type>
          <since>8.8.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>All dependencies are copied to a separated folder, which can be changed.</description>
        </parameter>
        <parameter>
          <name>mainClass</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The main JavaFX application class that acts as the entry point to the JavaFX application.</description>
        </parameter>
        <parameter>
          <name>nativeOutputDir</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The output directory that the native bundles are to be built into. This will be the base directory only as the JavaFX packaging tools use sub-directories that can&apos;t be customised. Generally just have a rummage through the sub-directories until you find what you are looking for.
This defaults to &apos;target/jfx/native&apos; and the interesting files are usually under &apos;bundles&apos;.
</description>
        </parameter>
        <parameter>
          <name>nativeReleaseVersion</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The release version as passed to the native installer. It would be nice to just use the project&apos;s version number but this must be a fairly traditional version string (like &apos;1.34.5&apos;) with only numeric characters and dot separators, otherwise the JFX packaging tools bomb out. We default to 1.0 in case you can&apos;t be bothered to set a version and don&apos;t really care. Normally all non-number signs and dots are removed from the value, which can be disabled by setting &apos;skipNativeVersionNumberSanitizing&apos; to true.</description>
        </parameter>
        <parameter>
          <name>needMenu</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to true if you would like your application to have a link in the main system menu (or platform equivalent) when it is installed.</description>
        </parameter>
        <parameter>
          <name>needShortcut</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to true if you would like your application to have a shortcut on the users desktop (or platform equivalent) when it is installed.</description>
        </parameter>
        <parameter>
          <name>noBlobSigning</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>JavaFX introduced a new way for signing jar-files, which was called &apos;BLOB signing&apos;.
The tool &apos;jarsigner&apos; is not able to verify that signature and webstart doesn&apos;t accept that format either. For not having to call jarsigner yourself, set this to &apos;true&apos; for having your jar-files getting signed when generating JNLP-files.
</description>
        </parameter>
        <parameter>
          <name>onlyCustomBundlers</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>secondaryLaunchers</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to true for skipping the execution.</description>
        </parameter>
        <parameter>
          <name>skipJNLP</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>skipJNLPRessourcePathWorkaround182</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Since Java version 1.8.0 Update 60 a new bundler for generating JNLP-files was presented and includes a bug while generating relative file-references when building on windows.
Change this to &apos;true&apos; when you don&apos;t want this workaround.
</description>
        </parameter>
        <parameter>
          <name>skipMacBundlerWorkaround</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>skipMainClassScanning</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to true, to not scan for the specified main class inside the generated/copied jar-files.
Check only works for the main launcher, any secondary launchers are not checked.
</description>
        </parameter>
        <parameter>
          <name>skipNativeLauncherWorkaround124</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Since Java version 1.8.0 Update 40 the native launcher for linux was changed and includes a bug while searching for the generated configfile. This results in wrong ouput like this:
client-1.1 No main class specified
client-1.1 Failed to launch JVM

Scenario (which would work on windows):

-	generated launcher: i-am.working.1.2.0-SNAPSHOT
-	launcher-algorithm extracts the &apos;extension&apos; (a concept not known in linux-space for executables) and now searches for i-am.working.1.2.cfg

Change this to &apos;true&apos; when you don&apos;t want this workaround.
</description>
        </parameter>
        <parameter>
          <name>skipNativeLauncherWorkaround167</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Since Java version 1.8.0 Update 60 the native launcher configuration for windows was changed and includes a bug: the file-format before was &apos;property-file&apos;, now it&apos;s &apos;INI-file&apos; per default, but the runtime-configuration isn&apos;t honored like in property-files. This workaround enforces the property-file-format.
Change this to &apos;true&apos; when you don&apos;t want this workaround.
</description>
        </parameter>
        <parameter>
          <name>skipNativeLauncherWorkaround205</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Same problem as workaround for bug 124 for native launchers, but this time regarding created native installers, where the workaround didn&apos;t apply.
Change this to &apos;true&apos; when you don&apos;t want this workaround.

Requires skipNativeLauncherWorkaround124 to be false.
</description>
        </parameter>
        <parameter>
          <name>skipNativeVersionNumberSanitizing</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>skipSigningJarFilesJNLP185</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Since Java version 1.8.0 Update 60 a new bundler for generating JNLP-files was introduced, but lacks the ability to sign jar-files by passing some flag. We are signing the files in the case of having &apos;jnlp&apos; as bundler. The MOJO with the goal &apos;build-web&apos; was deprecated in favor of that new bundler (mostly because the old one does not fit the bundler-list strategy).
Change this to &apos;true&apos; when you don&apos;t want signing jar-files.
</description>
        </parameter>
        <parameter>
          <name>skipSizeRecalculationForJNLP185</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>After signing is done, the sizes inside generated JNLP-files still point to unsigned jar-file sizes, so we have to fix these sizes to be correct. This sizes-fix even lacks in the old web-MOJO.
Change this to &apos;true&apos; when you don&apos;t want to recalculate sizes of jar-files.
</description>
        </parameter>
        <parameter>
          <name>useEnvironmentRelativeExecutables</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>All commands executed by this Maven-plugin will be done using the current available commands of your maven-execution environment. It is possible to call Maven with a different version of Java, so these calls might be wrong. To use the executables of the JDK used for running this maven-plugin, please set this to false. You might need this in the case you installed multiple versions of Java. The default is to use environment relative executables.</description>
        </parameter>
        <parameter>
          <name>userJvmArgs</name>
          <type>java.util.Map</type>
          <required>false</required>
          <editable>true</editable>
          <description>Optional command line arguments passed to the application when it is started. These will be included in the native bundle that is generated and will be accessible via the main(String[] args) method on the main class that is launched at runtime.
These options are user overridable for the value part of the entry via user preferences. The key and the value are concated without a joining character when invoking the JVM.
</description>
        </parameter>
        <parameter>
          <name>vendor</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The vendor of the application (i.e. you). This is required for some of the installation bundles and it&apos;s recommended just to set it from the get-go to avoid problems. This will default to the project.organization.name element in you POM if you have one.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to turn on verbose logging. Set this to true if you are having problems and want more detailed information.</description>
        </parameter>
      </parameters>
      <configuration>
        <additionalAppResources implementation="java.io.File">${jfx.additionalAppResources}</additionalAppResources>
        <additionalBundlerResources implementation="java.io.File">${jfx.additionalBundlerResources}</additionalBundlerResources>
        <additionalJarsignerParameters implementation="java.util.List">${jfx.additionalJarsignerParameters}</additionalJarsignerParameters>
        <appName implementation="java.lang.String" default-value="${project.build.finalName}">${jfx.appName}</appName>
        <bundleArguments implementation="java.util.Map">${jfx.bundleArguments}</bundleArguments>
        <bundler implementation="java.lang.String" default-value="ALL">${jfx.bundler}</bundler>
        <customBundlers implementation="java.util.List">${jfx.customBundlers}</customBundlers>
        <deployDir implementation="java.lang.String" default-value="${project.basedir}/src/main/deploy">${jfx.deployDir}</deployDir>
        <failOnError implementation="boolean" default-value="false">${jfx.failOnError}</failOnError>
        <fileAssociations implementation="java.util.List">${jfx.fileAssociations}</fileAssociations>
        <jfxAppOutputDir implementation="java.io.File" default-value="${project.build.directory}/jfx/app">${jfx.jfxAppOutputDir}</jfxAppOutputDir>
        <jfxCallFromCLI implementation="boolean" default-value="false"/>
        <jfxMainAppJarName implementation="java.lang.String" default-value="${project.build.finalName}-jfx.jar">${jfx.jfxMainAppJarName}</jfxMainAppJarName>
        <jvmArgs implementation="java.util.List">${jfx.jvmArgs}</jvmArgs>
        <jvmProperties implementation="java.util.Map">${jfx.jvmProperties}</jvmProperties>
        <keyPassword implementation="java.lang.String">${jfx.keyPassword}</keyPassword>
        <keyStore implementation="java.io.File" default-value="src/main/deploy/keystore.jks">${jfx.keyStore}</keyStore>
        <keyStoreAlias implementation="java.lang.String" default-value="myalias">${jfx.keyStoreAlias}</keyStoreAlias>
        <keyStorePassword implementation="java.lang.String" default-value="password">${jfx.keyStorePassword}</keyStorePassword>
        <keyStoreType implementation="java.lang.String" default-value="jks">${jfx.keyStoreType}</keyStoreType>
        <launcherArguments implementation="java.util.List">${jfx.launcherArguments}</launcherArguments>
        <libFolderName implementation="java.lang.String" default-value="lib">${jfx.libFolderName}</libFolderName>
        <mainClass implementation="java.lang.String">${jfx.mainClass}</mainClass>
        <nativeOutputDir implementation="java.io.File" default-value="${project.build.directory}/jfx/native">${jfx.nativeOutputDir}</nativeOutputDir>
        <nativeReleaseVersion implementation="java.lang.String" default-value="1.0">${jfx.nativeReleaseVersion}</nativeReleaseVersion>
        <needMenu implementation="boolean" default-value="false">${jfx.needMenu}</needMenu>
        <needShortcut implementation="boolean" default-value="false">${jfx.needShortcut}</needShortcut>
        <noBlobSigning implementation="boolean" default-value="false">${jfx.noBlobSigning}</noBlobSigning>
        <onlyCustomBundlers implementation="boolean" default-value="false">${jfx.onlyCustomBundlers}</onlyCustomBundlers>
        <secondaryLaunchers implementation="java.util.List">${jfx.secondaryLaunchers}</secondaryLaunchers>
        <skip implementation="boolean" default-value="false">${jfx.skip}</skip>
        <skipJNLP implementation="boolean" default-value="false">${jfx.skipJNLP}</skipJNLP>
        <skipJNLPRessourcePathWorkaround182 implementation="boolean">${jfx.skipJNLPRessourcePathWorkaround182}</skipJNLPRessourcePathWorkaround182>
        <skipMacBundlerWorkaround implementation="boolean" default-value="false">${jfx.skipMacBundlerWorkaround}</skipMacBundlerWorkaround>
        <skipMainClassScanning implementation="boolean">${jfx.skipMainClassScanning}</skipMainClassScanning>
        <skipNativeLauncherWorkaround124 implementation="boolean" default-value="false">${jfx.skipNativeLauncherWorkaround124}</skipNativeLauncherWorkaround124>
        <skipNativeLauncherWorkaround167 implementation="boolean" default-value="false">${jfx.skipNativeLauncherWorkaround167}</skipNativeLauncherWorkaround167>
        <skipNativeLauncherWorkaround205 implementation="boolean" default-value="false">${jfx.skipNativeLauncherWorkaround205}</skipNativeLauncherWorkaround205>
        <skipNativeVersionNumberSanitizing implementation="boolean" default-value="false">${jfx.skipNativeVersionNumberSanitizing}</skipNativeVersionNumberSanitizing>
        <skipSigningJarFilesJNLP185 implementation="boolean" default-value="false">${jfx.skipSigningJarFilesJNLP185}</skipSigningJarFilesJNLP185>
        <skipSizeRecalculationForJNLP185 implementation="boolean" default-value="false">${jfx.skipSizeRecalculationForJNLP185}</skipSizeRecalculationForJNLP185>
        <useEnvironmentRelativeExecutables implementation="boolean" default-value="true">${jfx.useEnvironmentRelativeExecutables}</useEnvironmentRelativeExecutables>
        <userJvmArgs implementation="java.util.Map">${jfx.userJvmArgs}</userJvmArgs>
        <vendor implementation="java.lang.String">${project.organization.name}</vendor>
        <verbose implementation="java.lang.Boolean" default-value="false">${jfx.verbose}</verbose>
      </configuration>
    </mojo>
    <mojo>
      <goal>run</goal>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <executeGoal>jar</executeGoal>
      <implementation>com.zenjava.javafx.maven.plugin.RunMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>deployDir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory contain deployment specific files, such as icons and splash screen images. This directory is added to the classpath of the Mojo when it runs, so that any files within this directory are accessible to the JavaFX packaging tools.
This defaults to src/main/deploy and typically this is good enough. Just put your deployment specific files in this directory and they will be automatically picked up.

The most common usage for this is to provide platform specific icons for native bundles. In this case you need to follow the convention of the JavaFX packaging tools to ensure your icons get picked up.

-	for windows put an icon at src/main/deploy/package/windows/your-app-name.ico
-	for mac put an icon at src/main/deploy/package/macosx/your-app-name.icns
</description>
        </parameter>
        <parameter>
          <name>jfxAppOutputDir</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &apos;app&apos; output directory. This is where the base executable JavaFX jar is built into, along with any dependent libraries (place in the &apos;lib&apos; sub-directory). The resulting JAR in this directory will be ready for distribution, including Pre-Loaders, signing, etc. This JAR will also be the one bundled into the other distribution bundles (i.e. web or native) if you run the relevant commands for that.
This defaults to &apos;target/jfx/app&apos; and in most cases there is no real need to change this.
</description>
        </parameter>
        <parameter>
          <name>jfxMainAppJarName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the JavaFX packaged JAR to be built into the &apos;app&apos; directory. By default this will be the finalName as set in your project with a &apos;-jfx&apos; suffix. Change this if you want something nicer. Note, that changing this value does not affect the regular old, non-JFX modified JAR (built in the &apos;target&apos; directory).</description>
        </parameter>
        <parameter>
          <name>libFolderName</name>
          <type>java.lang.String</type>
          <since>8.8.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>All dependencies are copied to a separated folder, which can be changed.</description>
        </parameter>
        <parameter>
          <name>mainClass</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The main JavaFX application class that acts as the entry point to the JavaFX application.</description>
        </parameter>
        <parameter>
          <name>runAppParameter</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>While developing, you might need some arguments for your application passed to your execution. To have them being part of the command used to start the application by this MOJO, just set all your parameters here. This fixes issue #176.</description>
        </parameter>
        <parameter>
          <name>runJavaParameter</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Developing and debugging javafx applications can be difficult, so a lot of tools exists, that need to be injected into the JVM via special parameter (e.g. javassist). To have this being part of the command used to start the application by this MOJO, just set all your parameters here.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to true for skipping the execution.</description>
        </parameter>
        <parameter>
          <name>useEnvironmentRelativeExecutables</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>All commands executed by this Maven-plugin will be done using the current available commands of your maven-execution environment. It is possible to call Maven with a different version of Java, so these calls might be wrong. To use the executables of the JDK used for running this maven-plugin, please set this to false. You might need this in the case you installed multiple versions of Java. The default is to use environment relative executables.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to turn on verbose logging. Set this to true if you are having problems and want more detailed information.</description>
        </parameter>
      </parameters>
      <configuration>
        <deployDir implementation="java.lang.String" default-value="${project.basedir}/src/main/deploy">${jfx.deployDir}</deployDir>
        <jfxAppOutputDir implementation="java.io.File" default-value="${project.build.directory}/jfx/app">${jfx.jfxAppOutputDir}</jfxAppOutputDir>
        <jfxMainAppJarName implementation="java.lang.String" default-value="${project.build.finalName}-jfx.jar">${jfx.jfxMainAppJarName}</jfxMainAppJarName>
        <libFolderName implementation="java.lang.String" default-value="lib">${jfx.libFolderName}</libFolderName>
        <mainClass implementation="java.lang.String">${jfx.mainClass}</mainClass>
        <runAppParameter implementation="java.lang.String">${jfx.runAppParameter}</runAppParameter>
        <runJavaParameter implementation="java.lang.String">${jfx.runJavaParameter}</runJavaParameter>
        <skip implementation="boolean" default-value="false">${jfx.skip}</skip>
        <useEnvironmentRelativeExecutables implementation="boolean" default-value="true">${jfx.useEnvironmentRelativeExecutables}</useEnvironmentRelativeExecutables>
        <verbose implementation="java.lang.Boolean" default-value="false">${jfx.verbose}</verbose>
      </configuration>
    </mojo>
    <mojo>
      <goal>web</goal>
      <description>Generates web deployment bundles (applet and webstart). This Mojo simply wraps the JavaFX packaging tools so it has all the problems and limitations of those tools. Currently you get both the webstart and applet outputs whether you want both or not.
This Mojo will automatically try and sign all JARs included in the deployment bundle if &apos;all-permissions&apos; are requested. If permissions are not requested, no signing will take place. The keystore parameters of this Mojo are only used in the case where signing is needed, and in that case some are required.

As a general comment, these web deployment techniques have been pretty error prone in the newer releases of Java. They are also not ideal if the user doesn&apos;t have Java already installed as the JRE installation process is very user unfriendly. Additionally, these web deployment methods are the root of all the security problems that have been giving Java a bad name recently. For all these reasons and more, I&apos;d highly recommend moving away from these deployment approaches in favour of native deployment bundles or just plain old JARs.

For detailed information on generating web bundles it is best to first read through the official documentation on the JavaFX packaging tools.

Note: this will be removed in some time, because Oracle created a bundler with id &apos;jnlp&apos;.
</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <executeGoal>jar</executeGoal>
      <implementation>com.zenjava.javafx.maven.plugin.CliWebMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>allPermissions</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to true if your app needs to break out of the standard web sandbox and do more powerful functions.

By setting this value, you are implicitly saying that your app needs to be signed. As such, this Mojo will automatically attempt to sign your JARs if this is set, and in this case the various keyStore parameters need to be set correctly and a keyStore must be present. Use the generate-key-store Mojo to generate a local keyStore for testing.

If you are using FXML you will need to set this value to true.
</description>
        </parameter>
        <parameter>
          <name>deployDir</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory contain deployment specific files, such as icons and splash screen images. This directory is added to the classpath of the Mojo when it runs, so that any files within this directory are accessible to the JavaFX packaging tools.
This defaults to src/main/deploy and typically this is good enough. Just put your deployment specific files in this directory and they will be automatically picked up.

The most common usage for this is to provide platform specific icons for native bundles. In this case you need to follow the convention of the JavaFX packaging tools to ensure your icons get picked up.

-	for windows put an icon at src/main/deploy/package/windows/your-app-name.ico
-	for mac put an icon at src/main/deploy/package/macosx/your-app-name.icns
</description>
        </parameter>
        <parameter>
          <name>description</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A description used within generated JNLP-file.</description>
        </parameter>
        <parameter>
          <name>embeddedHeight</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>If not set, will be the same as height-parameter.</description>
        </parameter>
        <parameter>
          <name>embeddedWidth</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>If not set, will be the same as width-parameter.</description>
        </parameter>
        <parameter>
          <name>height</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>j2seVersion</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>This value refers to a platform version of the Java Platform Standard Edition.</description>
        </parameter>
        <parameter>
          <name>jfxAppOutputDir</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &apos;app&apos; output directory. This is where the base executable JavaFX jar is built into, along with any dependent libraries (place in the &apos;lib&apos; sub-directory). The resulting JAR in this directory will be ready for distribution, including Pre-Loaders, signing, etc. This JAR will also be the one bundled into the other distribution bundles (i.e. web or native) if you run the relevant commands for that.
This defaults to &apos;target/jfx/app&apos; and in most cases there is no real need to change this.
</description>
        </parameter>
        <parameter>
          <name>jfxMainAppJarName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the JavaFX packaged JAR to be built into the &apos;app&apos; directory. By default this will be the finalName as set in your project with a &apos;-jfx&apos; suffix. Change this if you want something nicer. Note, that changing this value does not affect the regular old, non-JFX modified JAR (built in the &apos;target&apos; directory).</description>
        </parameter>
        <parameter>
          <name>keyPassword</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The password to use when accessing the key within the keystore. If not set, this will default to keyStorePassword.</description>
        </parameter>
        <parameter>
          <name>keyStore</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The location of the keystore. If not set, this will default to src/main/deploy/kesytore.jks which is usually fine to use for most cases.</description>
        </parameter>
        <parameter>
          <name>keyStoreAlias</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The alias to use when accessing the keystore. This will default to &apos;myalias&apos;.</description>
        </parameter>
        <parameter>
          <name>keyStorePassword</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The password to use when accessing the keystore. This will default to &apos;password&apos;.</description>
        </parameter>
        <parameter>
          <name>keyStoreType</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The type of KeyStore being used. This defaults to &apos;jks&apos;, which is the normal one.</description>
        </parameter>
        <parameter>
          <name>libFolderName</name>
          <type>java.lang.String</type>
          <since>8.8.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>All dependencies are copied to a separated folder, which can be changed.</description>
        </parameter>
        <parameter>
          <name>mainClass</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The main JavaFX application class that acts as the entry point to the JavaFX application.</description>
        </parameter>
        <parameter>
          <name>needMenu</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to true if you would like your application to have a link in the main system menu (or platform equivalent) when it is installed.</description>
        </parameter>
        <parameter>
          <name>needShortcut</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to true if you would like your application to have a shortcut on the users desktop (or platform equivalent) when it is installed.</description>
        </parameter>
        <parameter>
          <name>preLoader</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A custom class that can act as a Pre-Loader for your app. The Pre-Loader is run before anything else and is useful for showing splash screens or similar &apos;progress&apos; style windows. For more information on Pre-Loaders, see the official JavaFX packaging documentation.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to true for skipping the execution.</description>
        </parameter>
        <parameter>
          <name>title</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A title used within generated JNLP-file.</description>
        </parameter>
        <parameter>
          <name>useEnvironmentRelativeExecutables</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>All commands executed by this Maven-plugin will be done using the current available commands of your maven-execution environment. It is possible to call Maven with a different version of Java, so these calls might be wrong. To use the executables of the JDK used for running this maven-plugin, please set this to false. You might need this in the case you installed multiple versions of Java. The default is to use environment relative executables.</description>
        </parameter>
        <parameter>
          <name>vendor</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description>The vendor (i.e. you) to include in the deployment information.</description>
        </parameter>
        <parameter>
          <name>verbose</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to turn on verbose logging. Set this to true if you are having problems and want more detailed information.</description>
        </parameter>
        <parameter>
          <name>webOutputDir</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The output directory that the web bundle is to be built into. Both the webstart and applet bundle are generated into the same output directory and share the same JNLP and JAR files.
</description>
        </parameter>
        <parameter>
          <name>width</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <allPermissions implementation="boolean" default-value="false"/>
        <deployDir implementation="java.lang.String" default-value="${project.basedir}/src/main/deploy">${jfx.deployDir}</deployDir>
        <description implementation="java.lang.String" default-value="Sample JavaFX Application."/>
        <height implementation="int" default-value="600"/>
        <j2seVersion implementation="java.lang.String" default-value="1.7+"/>
        <jfxAppOutputDir implementation="java.io.File" default-value="${project.build.directory}/jfx/app">${jfx.jfxAppOutputDir}</jfxAppOutputDir>
        <jfxMainAppJarName implementation="java.lang.String" default-value="${project.build.finalName}-jfx.jar">${jfx.jfxMainAppJarName}</jfxMainAppJarName>
        <keyStore implementation="java.io.File" default-value="src/main/deploy/keystore.jks"/>
        <keyStoreAlias implementation="java.lang.String" default-value="myalias"/>
        <keyStorePassword implementation="java.lang.String" default-value="password"/>
        <keyStoreType implementation="java.lang.String" default-value="jks"/>
        <libFolderName implementation="java.lang.String" default-value="lib">${jfx.libFolderName}</libFolderName>
        <mainClass implementation="java.lang.String">${jfx.mainClass}</mainClass>
        <needMenu implementation="boolean" default-value="false"/>
        <needShortcut implementation="boolean" default-value="false"/>
        <skip implementation="boolean" default-value="false">${jfx.skip}</skip>
        <title implementation="java.lang.String" default-value="Sample JavaFX Application"/>
        <useEnvironmentRelativeExecutables implementation="boolean" default-value="true">${jfx.useEnvironmentRelativeExecutables}</useEnvironmentRelativeExecutables>
        <vendor implementation="java.lang.String">${project.organization.name}</vendor>
        <verbose implementation="java.lang.Boolean" default-value="false">${jfx.verbose}</verbose>
        <webOutputDir implementation="java.io.File" default-value="${project.build.directory}/jfx/web"/>
        <width implementation="int" default-value="800"/>
      </configuration>
    </mojo>
  </mojos>
</plugin>